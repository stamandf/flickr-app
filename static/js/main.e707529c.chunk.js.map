{"version":3,"sources":["components/InfinitScrollDots.js","components/SearchPhotos.js","utilities/buildSrchTerm.js","components/Photo.js","components/Gallery.js","components/Container.js","components/Search.js","components/Wall.js","App.js","serviceWorker.js","index.js","utilities/getPhotos.js"],"names":["InfinitScrollDots","xmlns","xlink","d","React","Component","photosFound","SearchPhotos","props","state","text","handleChange","bind","handleSubmit","e","this","setState","target","value","preventDefault","newKeywords","split","join","blur","photo","fetchPhotos","errorMessage","results","console","log","addPhotos","page","total","history","push","className","onSubmit","type","id","name","ref","input","placeholder","onChange","withRouter","Photo","farm","server","secret","src","alt","Gallery","children","Container","Search","Wall","keywords","listPhotos","hasMore","addKeyword","fetchMoreData","words","photos","length","setTimeout","concat","photoList","map","item","key","uuid","dataLength","next","loader","height","endMessage","App","exact","path","render","routeProps","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","request","require","module","exports","srchtext","srchpage","callback","url","flickrMethod","json","error","response","body","statusCode","undefined"],"mappings":"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","file":"static/js/main.e707529c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class InfinitScrollDots extends React.Component {\n    render() {\n        return (\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"  \n                xlink=\"http://www.w3.org/1999/xlink\">\n                aria-hidden=\"true\"\n                version=\"1.1\"  \n                id=\"icon-dots-three-horizontal\"\n                viewBox=\"0 0 40 40\">\n                <style>\n                position=absolute\n                width=0 \n                height=0\n                zIndex=100\n                overflow=hidden\n                </style> \n                <title>dots-three-horizontal</title>\n                <path d=\"M20.002 15.6c-2.43 0-4.402 1.97-4.402 4.4s1.972 4.4 4.402 4.4c2.43 0 4.398-1.97 4.398-4.4s-1.968-4.4-4.398-4.4zM6.002 15.6c-2.43 0-4.402 1.97-4.402 4.4s1.972 4.4 4.402 4.4c2.43 0 4.398-1.972 4.398-4.4s-1.968-4.4-4.398-4.4zM34.002 15.6c-2.43 0-4.402 1.97-4.402 4.4s1.972 4.4 4.402 4.4c2.43 0 4.398-1.97 4.398-4.4s-1.968-4.4-4.398-4.4z\"/>\n            </svg>\n        )\n    }\n}","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport photo from '../utilities/getPhotos';\nimport getKeyWords from '../utilities/buildSrchTerm';\n\nlet photosFound = [];\nclass SearchPhotos extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            text: \"\"\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(e) {\n        this.setState({ text: e.target.value});\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        let newKeywords = getKeyWords(this.state.text);\n        \n        this.setState({ text: ''});\n        this.text.blur();\n\n        //get photos with input keywords\n        photo.fetchPhotos(newKeywords, 1, (errorMessage, results) => {\n            if(errorMessage) {\n                console.log(errorMessage);\n            } else {\n                photosFound = results;\n                this.props.addPhotos(newKeywords, photosFound.page, photosFound.total, photosFound.photo); //return search results\n                \n                //reset form\n                this.setState({ text: ''}); \n                this.text.blur();\n                \n                //relocate\n                this.props.history.push(`/#/${newKeywords}`);\n                \n            }\n        });\n    }\n    \n    render() {\n        \n        return (\n            <div>\n                <form className=\"search\" onSubmit={this.handleSubmit}>\n                    <input className=\"search__input\"\n                        type='text'\n                        id='text'\n                        name='text'\n                        ref={input => {\n                            this.text = input;\n                        }}\n                        placeholder='Search photos'\n                        value={this.state.text}\n                        onChange={this.handleChange}\n                    />\n                </form>\n            </div>\n        );\n    }\n        \n}\nexport default withRouter(SearchPhotos);","export default (string) => { \n    //Take input search terms and convert into flickr friendly keyword format\n    const words = string.split(\" \"); \n    const keywords = words.join('+');\n    return keywords;\n}","import React from 'react';\n\n\nexport default class Photo extends React.Component {\n    constructor(props) {\n        super(props);\n         this.state = {\n            farm: this.props.farm,\n            server: this.props.server,\n            id: this.props.id,\n            secret: this.props.secret,\n        }\n    }\n   \n    render() {\n        // The image reference URL has the following format:\n        // https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpg\n\n        return (\n            <figure className=\"gallery__item \">\n                <img src={`https://farm${this.state.farm}.staticflickr.com/${this.state.server}/${this.state.id}_${this.state.secret}.jpg`} alt={`Gallery item ${this.state.id}`}  />\n            </figure>\n        );\n    }\n\n}","import React from 'react';\n\nexport default class Gallery extends React.Component {\n    render() {\n        return <div className='gallery'>{this.props.children}</div>\n    } \n}","import React from 'react';\n\nexport default class Container extends React.Component {\n    render() {\n        return <div className=\"container\">{this.props.children}</div>\n    }\n}","import React from 'react';\n\nexport default class Search extends React.Component {\n    render() {\n        return <div className=\"search\">{this.props.children}</div>\n    }\n}","import React from 'react';\nimport uuid from 'uuid';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport InfinitScrollDots from './InfinitScrollDots';\nimport SearchPhotos from './SearchPhotos';\nimport Photo from './Photo';\nimport Gallery from './Gallery';\nimport Container from './Container';\nimport Search from './Search';\nimport photo from '../utilities/getPhotos';\n\nexport default class Wall extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            keywords: '',\n            page: 1,\n            total: 0,\n            listPhotos: [],\n            hasMore: true\n        }\n    \n        this.addKeyword = this.addKeyword.bind(this);\n        this.addPhotos = this.addPhotos.bind(this);\n        this.fetchMoreData = this.fetchMoreData.bind(this);\n    }\n\n    addKeyword(words)  {\n        this.setState({ keywords: words });\n    }\n    addPhotos(words, page, total, photos)  {\n        this.setState({\n            keywords: words,\n            page: page,\n            total: total,\n            listPhotos: photos\n        })\n    }\n    fetchMoreData() {\n        let photosFound = [];\n        if (this.state.listPhotos.length >= this.state.total) {\n            this.setState({ hasMore: false });\n            return;\n        }\n        setTimeout(() => {\n            photo.fetchPhotos(this.state.keywords, this.state.page+1, (errorMessage, results) => {\n                if(errorMessage) {\n                    console.log(errorMessage);\n                } else {\n                    photosFound = results;\n                    this.setState({\n                        page: photosFound.page,\n                        listPhotos: this.state.listPhotos.concat(photosFound.photo)\n                    })\n                    \n                }\n            });\n        }, 500);\n    }\n\n    render() {\n        const photoList = this.state.listPhotos.map(item => (\n            //format each item into url in about format\n            // https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpg\n\n            <Photo\n                key={uuid()}\n                farm={item.farm}\n                server={item.server}\n                id={item.id}\n                secret={item.secret}\n            />\n        ));\n\n        return (\n            <Container>\n                <Search>\n                    <SearchPhotos  addPhotos={this.addPhotos}/>\n                </Search>\n                <InfiniteScroll\n                    dataLength={photoList.length}\n                    next={this.fetchMoreData}\n                    hasMore={this.state.hasMore}\n                    // loader={<h4>Loading...</h4>}\n                    loader={\n                        <InfinitScrollDots className=\"icon__infinity\"/>\n                    }\n                    height={800}\n                    endMessage={\n                        <p>THE END.</p>\n                    }\n                >\n                    <Gallery>\n                        {photoList}\n                    </Gallery>\n                </InfiniteScroll>\n            </Container>\n        );\n    }\n}","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Wall from './components/Wall';\nimport './styles/styles.scss'\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      keywords: '',\n      total: 0,\n      listPhotos: []\n    }\n  }\n  addKeyword(words)  {\n    this.setState({ keywords: words });\n  }\n  addPhotos(words,total, photos)  {\n      this.setState({\n          keywords: words,\n          total: total,\n          listPhotos: photos\n      })\n  }\n  render() {\n    return (\n      <div className='App'>\n        <Switch>\n          <Route exact path='/' render={() => <Wall />} />\n          <Route exact path='/#/:keyword' render={routeProps => <Wall {...routeProps}/>} />\n        </Switch>\n      </div>\n      )}\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const request = require('request');\n\nconst fetchPhotos = (srchtext, srchpage, callback) => {\n    const key = '&api_key=44779de00e72e9ec8ffbf165bc0f6ca6';\n    const flickrMethod = 'https://www.flickr.com/services/rest/?method=flickr.photos.search';\n    const format = '&format=json&nojsoncallback=1';\n    let text = '&text=' + srchtext;\n    let page = '&page=' + srchpage;\n\n    // The flickr method flickr.photos.search request URL\n    let req_url = flickrMethod + key + text + page + format;\n\n    request ({\n        url: req_url,\n        json:true\n    }, (error, response, body) => {\n        if(!error && response.statusCode === 200) {\n            callback(undefined, {\n                page: body.photos.page,\n                total: body.photos.total,\n                photo: body.photos.photo\n            });\n        } else {\n            callback('Unable to fetch photos.')\n            }\n    });\n\n\n}\nmodule.exports.fetchPhotos = fetchPhotos;"],"sourceRoot":""}